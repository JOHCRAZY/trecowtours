<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace common\models\base;

use Yii;
use yii\helpers\ArrayHelper;
use yii\behaviors\TimestampBehavior;

/**
 * This is the base-model class for table "bookings".
 *
 * @property integer $booking_id
 * @property integer $tour_id
 * @property integer $user_id
 * @property integer $customer_id
 * @property string $booking_type
 * @property string $booking_date
 * @property string $payment_status
 * @property string $total_amount
 * @property string $discount_applied
 * @property integer $is_deleted
 * @property integer $number_of_participants
 * @property string $booking_status
 * @property string $booking_notes
 * @property string $booking_code
 * @property string $created_at
 * @property string $updated_at
 *
 * @property \common\models\Customers $customer
 * @property \common\models\Tours $tour
 */
abstract class Bookings extends \yii\db\ActiveRecord
{

    public const BOOKING_STATUS_PENDING = 'Pending';
    public const BOOKING_STATUS_CONFIRMED = 'Confirmed';
    public const BOOKING_STATUS_CANCELLED = 'Cancelled';

    PUBLIC const BOOKING_PAYMENT_STATUS_PENDING = 'Pending';
    PUBLIC const BOOKING_PAYMENT_STATUS_PAID = 'Paid';
    PUBLIC const BOOKING_PAYMENT_STATUS_CANCELLED = 'Cancelled';


    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'bookings';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['timestamp'] = [
            'class' => TimestampBehavior::class,
            'value' => (new \DateTime())->format('Y-m-d H:i:s'),
                        ];
        
    return $behaviors;
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        $parentRules = parent::rules();
        return ArrayHelper::merge($parentRules, [
            [['user_id', 'booking_type', 'payment_status'], 'default', 'value' => null],
            [['discount_applied'], 'default', 'value' => 0.00],
            [['is_deleted'], 'default', 'value' => 0],
            [['tour_id', 'customer_id', 'total_amount', 'number_of_participants', 'booking_status', 'booking_notes', 'booking_code'], 'required'],
            [['tour_id', 'user_id', 'customer_id', 'is_deleted', 'number_of_participants'], 'integer'],
            [['booking_date'], 'safe'],
            [['total_amount', 'discount_applied'], 'number'],
            [['booking_type', 'payment_status'], 'string', 'max' => 20],
            [['booking_status'], 'string', 'max' => 50],
            [['booking_notes'], 'string', 'max' => 255],
            [['booking_code'], 'string', 'max' => 225],
            [['customer_id'], 'exist', 'skipOnError' => true, 'targetClass' => \common\models\Customers::class, 'targetAttribute' => ['customer_id' => 'customer_id']],
            [['tour_id'], 'exist', 'skipOnError' => true, 'targetClass' => \common\models\Tours::class, 'targetAttribute' => ['tour_id' => 'tour_id']]
        ]);
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return ArrayHelper::merge(parent::attributeLabels(), [
            'booking_id' => Yii::t('app', 'Booking ID'),
            'tour_id' => Yii::t('app', 'Tour'),
            'user_id' => Yii::t('app', 'User'),
            'customer_id' => Yii::t('app', 'Customer'),
            'booking_type' => Yii::t('app', 'Booking Type'),
            'booking_date' => Yii::t('app', 'Booking Date'),
            'payment_status' => Yii::t('app', 'Payment Status'),
            'total_amount' => Yii::t('app', 'Total Amount'),
            'discount_applied' => Yii::t('app', 'Discount Applied'),
            'is_deleted' => Yii::t('app', 'Is Deleted'),
            'number_of_participants' => Yii::t('app', 'Number Of Participants'),
            'booking_status' => Yii::t('app', 'Booking Status'),
            'booking_notes' => Yii::t('app', 'Booking Notes'),
            'booking_code' => Yii::t('app', 'Booking Code'),
            'created_at' => Yii::t('app', 'Created At'),
            'updated_at' => Yii::t('app', 'Updated At'),
        ]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getCustomer()
    {
        return $this->hasOne(\common\models\Customers::class, ['customer_id' => 'customer_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getTour()
    {
        return $this->hasOne(\common\models\Tours::class, ['tour_id' => 'tour_id']);
    }

    public static function getBookingStatusList()
    {
        return [
            self::BOOKING_STATUS_PENDING => Yii::t('app', 'Pending'),
            self::BOOKING_STATUS_CONFIRMED => Yii::t('app', 'Confirmed'),
            self::BOOKING_STATUS_CANCELLED => Yii::t('app', 'Cancelled'),
        ];
    }
    public static function getPaymentStatusList()
    {
        return [
            self::BOOKING_PAYMENT_STATUS_PENDING => Yii::t('app', 'Pending'),
            self::BOOKING_PAYMENT_STATUS_PAID => Yii::t('app', 'Paid'),
            self::BOOKING_PAYMENT_STATUS_CANCELLED => Yii::t('app', 'Cancelled'),

        ];
    }


 public static function getBookingStatusBadge($status)
 {
   $badges = [
         'pending' => '<span class="badge bg-warning text-dark">Pending</span>',
        'confirmed' => '<span class="badge bg-success">Confirmed</span>',
         'cancelled' => '<span class="badge bg-danger">Cancelled</span>',
          'completed' => '<span class="badge bg-info">Completed</span>',
         // Add other statuses as needed
     ];
      
     return $badges[$status] ?? '<span class="badge bg-secondary">Unknown</span>';
  }
 

}
