<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace common\models\base;

use Yii;
use yii\helpers\ArrayHelper;
use yii\behaviors\TimestampBehavior;
use RuntimeException;

/**
 * This is the base-model class for table "service_bookings".
 *
 * @property integer $booking_id
 * @property string $booking_reference
 * @property integer $service_id
 * @property string $customer_name
 * @property string $customer_email
 * @property string $customer_phone
 * @property integer $number_of_people
 * @property string $booking_date
 * @property string $tour_date
 * @property string $end_date
 * @property string $total_price
 * @property string $special_requests
 * @property string $status
 * @property string $created_at
 * @property string $updated_at
 *
 * @property \common\models\BookingPayments[] $bookingPayments
 * @property \common\models\Services $service
 */
abstract class ServiceBookings extends \yii\db\ActiveRecord
{

    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'service_bookings';
    }

    /**
     * @inheritdoc
     */
    public function behaviors()
    {
        $behaviors = parent::behaviors();
        // $behaviors['timestamp'] = [
        //     'class' => TimestampBehavior::class,
        //                 ];
        
    return $behaviors;
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        $parentRules = parent::rules();
        return ArrayHelper::merge($parentRules, [
            [['booking_reference'],'default', 'value' => self::generateBookingCode(10, 'BK-', function($code)  {
                // Check if code exists in database
               return self::find()->where(['booking_reference' => $code])->count() > 0;
           })],
            [['service_id', 'customer_phone', 'end_date', 'special_requests'], 'default', 'value' =>  null ],
            [['number_of_people'], 'default', 'value' => 1],
            [['customer_name', 'customer_phone', 'customer_email', 'tour_date'], 'required'],
            [['service_id', 'number_of_people'], 'integer'],
            [['booking_date', 'tour_date', 'end_date'], 'safe'],
            [['total_price'], 'number'],
            [['special_requests'], 'string'],
            [['booking_reference', 'customer_phone'], 'string', 'max' => 20],
            [['customer_name', 'customer_email', 'status'], 'string', 'max' => 100],
            [['service_id'], 'exist', 'skipOnError' => true, 'targetClass' => \common\models\Services::class, 'targetAttribute' => ['service_id' => 'service_id']]
        ]);
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return ArrayHelper::merge(parent::attributeLabels(), [
            'booking_id' => Yii::t('app', 'Booking ID'),
            'booking_reference' => Yii::t('app', 'Booking Reference'),
            'service_id' => Yii::t('app', 'Service ID'),
            'customer_name' => Yii::t('app', 'Customer Name'),
            'customer_email' => Yii::t('app', 'Customer Email'),
            'customer_phone' => Yii::t('app', 'Customer Phone'),
            'number_of_people' => Yii::t('app', 'Number Of People'),
            'booking_date' => Yii::t('app', 'Booking Date'),
            'tour_date' => Yii::t('app', 'Tour Date'),
            'end_date' => Yii::t('app', 'End Date'),
            'total_price' => Yii::t('app', 'Total Price'),
            'special_requests' => Yii::t('app', 'Special Requests'),
            'status' => Yii::t('app', 'Status'),
            'created_at' => Yii::t('app', 'Created At'),
            'updated_at' => Yii::t('app', 'Updated At'),
        ]);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getBookingPayments()
    {
        return $this->hasMany(\common\models\BookingPayments::class, ['booking_id' => 'booking_id']);
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getService()
    {
        return $this->hasOne(\common\models\Services::class, ['service_id' => 'service_id']);
    }



    /**
 * Generates a unique, secure, and user-friendly booking code
 * 
 * @param int $length Length of the booking code (default: 8)
 * @param string $prefix Optional prefix for the booking code
 * @param callable|null $existsCallback Optional callback to check if code already exists
 * @param int $maxAttempts Maximum attempts to generate a unique code (default: 10)
 * @return string Unique booking code
 * @throws RuntimeException If unable to generate a unique code after max attempts
 */
function generateBookingCode(int $length = 8, string $prefix = '', ?callable $existsCallback = null, int $maxAttempts = 10): string
{
    // Characters to use (excluding ambiguous characters like 0/O, 1/I/l)
    $chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789';
    $attempts = 0;
    
    do {
        // Increment attempt counter
        $attempts++;
        
        // Start with prefix if provided
        $bookingCode = $prefix;
        
        // Add high-entropy component (timestamp + random)
        $timestamp = microtime(true);
        $randVal = random_int(1000, 9999);
        $entropy = hash('xxh3', $timestamp . $randVal, true);
        
        // Add cryptographically secure random bytes
        $randomBytes = random_bytes(16);
        
        // Combine entropy sources and hash
        $combined = hash('sha256', $entropy . $randomBytes, true);
        
        // Convert hash to our character set to avoid ambiguous characters
        $remainingLength = $length - strlen($prefix);
        for ($i = 0; $i < $remainingLength; $i++) {
            $index = ord($combined[$i % strlen($combined)]) % strlen($chars);
            $bookingCode .= $chars[$index];
        }
        
        // Add hyphen for readability if code is longer than 6 characters
        if (strlen($bookingCode) > 6 && strpos($bookingCode, '-') === false) {
            $midPoint = ceil(strlen($bookingCode) / 2);
            $bookingCode = substr($bookingCode, 0, $midPoint) . '-' . substr($bookingCode, $midPoint);
        }
        
        // Check if code already exists using callback (if provided)
        $codeExists = $existsCallback !== null ? $existsCallback($bookingCode) : false;
        
    } while ($codeExists && $attempts < $maxAttempts);
    
    // Throw exception if we couldn't generate a unique code after max attempts
    if ($codeExists) {
        throw new RuntimeException("Failed to generate a unique booking code after {$maxAttempts} attempts");
    }
    
    return $bookingCode;
}
}
